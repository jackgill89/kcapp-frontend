$ const types = require('../../../../components/scorecard/components/match_types');

<div class="alert alert-danger" id="cancel-leg-failed-alert" role="alert" hidden="true">Unable to cancel leg</div>
<div class="pt-20"/>
<leg-header leg=state.leg match=input.match experimental=input.experimental
  on-enable-button-input("onEnableButtonInput")
  on-enable-compact-mode("onEnableCompactMode")
  on-enable-all-buttons-mode("onEnableAllButtonsMode")/>
<div style={ display: state.compactMode ? "none" : "" }>
  <table>
    <tbody>
      <if(input.leg.players.length % 2 != 0 && state.venueConfig.has_dual_monitor)>
        <for|player| of=input.leg_players>
          <tr>
            <scorecard-header key=`player-${player.player_id}` player=player players=input.players isPlayerBoardCam=state.isPlayerBoardCam on-toggle-camera("onToggleCamera")/>
            <scorecard key="players[]" uuid=state.uuid leg=state.leg submitting=state.submitting player=player players=input.leg_players type=input.match.match_type.id
                on-possible-throw("onPossibleThrow")
                on-score-change("onScoreChange")
                on-player-busted("onPlayerBusted")
                on-leg-finished("onLegFinished")
                on-undo-throw("onUndoThrow")/>
            </tr>
        </for>
      </if>
      <else>
        <tr>
          <for|player| of=input.leg_players>
            <scorecard-header key=`player-${player.player_id}` player=player players=input.players isPlayerBoardCam=state.isPlayerBoardCam on-toggle-camera("onToggleCamera")/>
          </for>
        </tr>
        <tr>
          <for|player| of=input.leg_players>
            <scorecard key="players[]" uuid=state.uuid leg=state.leg submitting=state.submitting player=player players=input.leg_players type=input.match.match_type.id
                on-possible-throw("onPossibleThrow")
                on-score-change("onScoreChange")
                on-player-busted("onPlayerBusted")
                on-leg-finished("onLegFinished")
                on-undo-throw("onUndoThrow")/>
          </for>
        </tr>
      </else>
    </tbody>
  </table>
  <if(input.match.match_type.id == types.TIC_TAC_TOE)>
    <div class="block-container-header-center">Board</div>
    <div class="block-container-with-header">
      <tic-tac-toe-board key='tic-tac-toe-board' leg=state.leg players=input.players tableStyle=(state.venueConfig.has_dual_monitor ? 'float: right' : '')/>
    </div>
  </if>
</div>
<player-order players=input.leg_players match=input.match legId=state.leg.id on-warmup-started("onWarmupStarted") on-smartboard-reconnect('onSmartboardReconnect')/>
<qr-code-modal/>
<confirm-checkout on-confirm-checkout("onConfirmCheckout")/>
<if(state.enableButtonInput)>
  <button-input-table key="compact-input" type=state.type leg=state.leg compactMode=state.compactMode allButtonsMode=state.allButtonsMode players=state.players on-score-button-pressed("onScoreButtonPressed")/>
</if>
